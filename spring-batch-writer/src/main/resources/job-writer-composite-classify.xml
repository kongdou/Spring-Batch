<?xml version="1.0" encoding="UTF-8"?>
<bean:beans xmlns="http://www.springframework.org/schema/batch"
	xmlns:bean="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/batch 
    http://www.springframework.org/schema/batch/spring-batch-2.2.xsd">
	<bean:import resource="classpath:job-context.xml" />

	<job id="compositeClassifyWriterJob">
		<step id="compositeClassifyWriterStep">
			<tasklet transaction-manager="transactionManager">
				<chunk reader="flatItemReader" processor="processor"
					writer="compositeClassifyWriter" commit-interval="10">
					<streams>
						<stream ref="flatFileItemWriterLarge" />
						<stream ref="flatFileItemWriterSmall" />
					</streams>
				</chunk>
			</tasklet>
		</step>
	</job>

	<bean:bean id="compositeClassifyWriter"
		class="org.springframework.batch.item.support.ClassifierCompositeItemWriter">
		<bean:property name="classifier" ref="backToBackClassifier" />
	</bean:bean>

	<bean:bean id="backToBackClassifier"
		class="org.springframework.classify.BackToBackPatternClassifier">
		<bean:property name="routerDelegate" ref="creditBillRouterClassifier" />
		<bean:property name="matcherMap">
			<bean:map>
				<bean:entry key="large" value-ref="flatFileItemWriterLarge" />
				<bean:entry key="small" value-ref="flatFileItemWriterSmall" />
			</bean:map>
		</bean:property>
	</bean:bean>

	<bean:bean id="creditBillRouterClassifier"
		class="fun.deepsky.springbatch.writer.router.CreditBillRouterClassifier" />

	<bean:bean id="flatItemReader"
		class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<bean:property name="resource"
			value="classpath:data/flat/credit-card-bill-201303.csv" />
		<bean:property name="lineMapper" ref="lineMapper" />
	</bean:bean>

	<bean:bean id="lineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
		<bean:property name="lineTokenizer" ref="delimitedLineTokenizer" />
		<bean:property name="fieldSetMapper" ref="creditBillFieldSetMapper" />
	</bean:bean>

	<bean:bean id="delimitedLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
		<bean:property name="delimiter" value="," />
		<bean:property name="names" value="id,accountID,name,amount,date,address" />
	</bean:bean>

	<bean:bean id="creditBillFieldSetMapper"
		class="fun.deepsky.springbatch.writer.router.CreditBillFieldSetMapper" />

	<bean:bean id="processor"
		class="fun.deepsky.springbatch.writer.router.CreditBillProcessor" scope="step" />

	<bean:bean id="flatFileItemWriterLarge"
		class="org.springframework.batch.item.file.FlatFileItemWriter">
		<bean:property name="resource" value="file:target/outputFile_large.csv" />
		<bean:property name="lineAggregator" ref="lineAggregator">
		</bean:property>
	</bean:bean>

	<bean:bean id="flatFileItemWriterSmall"
		class="org.springframework.batch.item.file.FlatFileItemWriter">
		<bean:property name="resource" value="file:target/outputFile_small.csv" />
		<bean:property name="lineAggregator" ref="lineAggregator">
		</bean:property>
	</bean:bean>

	<bean:bean id="lineAggregator"
		class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
		<bean:property name="delimiter" value="," />
		<bean:property name="fieldExtractor">
			<bean:bean
				class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
				<bean:property name="names"
					value="id,accountID,name,amount,date,address">
				</bean:property>
			</bean:bean>
		</bean:property>
	</bean:bean>
</bean:beans>
